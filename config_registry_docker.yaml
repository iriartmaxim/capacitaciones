version: 0.1    ## La versión es obligatoria. Especifica la versión de la configuración.

log:            ## La subsección log configura el comportamiento del sistema de logs de registro. El sistema del registro envía todo a stout por defecto.

  level: debug  ## Este campo establece la sensibilidad del registro. Los valores permitidos son error, warn, info y debug. 
  formatter: text ## Este campo afecta principalmente como se codifican los atributos clave. Las opciones son text, json y logstash.
  
  fields:         ## Esto define el mapa de nombres de campo a valores. 
    service: registry  ## Se agregan a cada linea del registro con el fin de identificar el origen de los mensajes cuando se mezclan los sistemas.
    environment: staging
    
  hooks:
    - type: mail
      disabled: true
      levels:
        - panic
      options:
        smtp:
          addr: mail.example.com:25
          username: mailuser
          password: password
          insecure: true
        from: sender@example.com
        to:
          - errors@example.com
             
             
storage:  ## Esta opción es obligatoria y define el backend de almacenamiento, se debe configurar exactamente un backend. Si se configura más, devolvera un error.
    
  filesystem: ## Utiliza el disco local para almacenar.
    rootdirectory: /var/lib/registry
   
  swift:     ## Utiliza el almacenamiento de objetos del cluster Openshift.
    username: username
    password: password
    authurl: https://storage.myprovider.com/auth/v1.0 or https://storage.myprovider.com/v2.0 or https://storage.myprovider.com/v3/auth
    tenant: tenantname
    tenantid: tenantid
    domain: domain name for Openstack Identity v3 API
    domainid: domain id for Openstack Identity v3 API
    insecureskipverify: true
    region: fr
    container: containername
    rootdirectory: /swift/object/name/prefix
   
   
http:  ## Esta sección detalla la configuración del servidor HTTP que hospeda el registro.
  addr: localhost:5000 ## En este campo se define en cual dirección el servidor acepta conexiones.
  host: https://myregistryaddress.org:5000 ## Una dirección URL completa accesible externamente para el registro.
  secret: asecretforlocaldevelopment ## En este campo se puede definir un dato aleatorio. En entornos de producción se debe utilizar un generador criptográfico aleatorio seguro.
  ## También si se se esta creando un cluster de registros detrás de un loadbalancer, hay que asegurarse de que sea el mismo secreto para todos.

  tls: ## Armar la estructura de los campos para configurar TLS es opcional pero altamente recomendado.
  
    certificate: /path/to/x509/public ## Ruta absoluta al archivo de certificado x509
    key: /path/to/x509/private ## Ruta absoluta al archivo de clave privada x509.
    
    clientcas: ## Una matriz de rutas absolutas a archivos de CA x509.
      - /path/to/ca.pem
      - /path/to/another/ca.pem
      
    minimumtls: tls1.2
    
    ciphersuites: ## Cifrados permitidos. En el ejemplo se muestran 2, hay muchos más.
      - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
      - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
     
    
    
auth:  ##
  token:
    realm: http://localhost:8080/auth/auth/realms/master/protocol/docker-v2/auth ## El dominio del realm donde se autentica el servidor de registro.
    service: docker-test ## El servicio que se esta autenticando
    issuer: http://localhost:8080/auth/auth/realms/master ## El nombre del emisor del token. El emisor inserta esto en el token, así que debe coinicidir con el valor configurado para el emisor.
    autoredirect: true ## Cuando se establece en true, el realm se configura automaticamente utilizando el header de la solicitud como el dominio y una ruta /auth/token


