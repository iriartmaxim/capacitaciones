version: 0.1    ## La versión es obligatoria. Especifica la versión de la configuración.


log:            ## La subsección log configura el comportamiento del sistema de logs de registro. El sistema del registro envía todo a stout por defecto.

  level: debug  ## Este campo establece la sensibilidad del registro. Los valores permitidos son error, warn, info y debug. 
  formatter: text ## Este campo afecta principalmente como se codifican los atributos clave. Las opciones son text, json y logstash.
  
  fields:         ## Esto define el mapa de nombres de campo a valores. 
    service: registry  ## Se agregan a cada linea del registro con el fin de identificar el origen de los mensajes cuando se mezclan los sistemas.
    environment: staging
    
  hooks:
    - type: mail
      disabled: true
      levels:
        - panic
      options:
        smtp:
          addr: mail.example.com:25
          username: mailuser
          password: password
          insecure: true
        from: sender@example.com
        to:
          - errors@example.com
             
             
storage:  ## Esta opción es obligatoria y define el backend de almacenamiento, se debe configurar exactamente un backend. Si se configura más, devolvera un error.
    
  filesystem: ## Utiliza el disco local para almacenar.
    rootdirectory: /var/lib/registry
   
  swift:     ## Utiliza el almacenamiento de objetos del cluster Openshift.
    username: username
    password: password
    authurl: https://storage.myprovider.com/auth/v1.0 or https://storage.myprovider.com/v2.0 or https://storage.myprovider.com/v3/auth
    tenant: tenantname
    tenantid: tenantid
    domain: domain name for Openstack Identity v3 API
    domainid: domain id for Openstack Identity v3 API
    insecureskipverify: true
    region: fr
    container: containername
    rootdirectory: /swift/object/name/prefix
   
   
http:
  addr: localhost:5000
  prefix: /my/nested/registry/
  host: https://myregistryaddress.org:5000
  secret: asecretforlocaldevelopment
  relativeurls: false
  draintimeout: 60s
  tls:
    certificate: /path/to/x509/public
    key: /path/to/x509/private
    clientcas:
      - /path/to/ca.pem
      - /path/to/another/ca.pem
    letsencrypt:
      cachefile: /path/to/cache-file
      email: emailused@letsencrypt.com
      hosts: [myregistryaddress.org]
  debug:
    addr: localhost:5001
    prometheus:
      enabled: true
      path: /metrics
  headers:
    X-Content-Type-Options: [nosniff]
  http2:
    disabled: false
    
    
auth:  ##
  token:
    realm: http://localhost:8080/auth/auth/realms/master/protocol/docker-v2/auth ## El dominio del realm donde se autentica el servidor de registro.
    service: docker-test ## El servicio que se esta autenticando
    issuer: http://localhost:8080/auth/auth/realms/master ## El nombre del emisor del token. El emisor inserta esto en el token, así que debe coinicidir con el valor configurado para el emisor.
    autoredirect: true ## Cuando se establece en true, el realm se configura automaticamente utilizando el header de la solicitud como el dominio y una ruta /auth/token
  htpasswd:
    realm: basic-realm
    path: /etc/registry
health:
  storagedriver:
    enabled: true
    interval: 10s
    threshold: 3
